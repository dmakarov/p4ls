branches:
  only:
    - master

dist: xenial
sudo: false
language: c++

env:
  global:
    - MAKEFLAGS="-j 2"
    - CODECOV_TOKEN="4b009c79-6c51-453f-90b8-c1e8e183a857"

git:
  depth: 1

addons:
  apt:
    sources: &apt_sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-xenial-7

cache:
  directories:
    - ${HOME}/.hunter

matrix:
  fast_finish: true
  include:
    - env: COMPILER=g++-8
      os: linux
      compiler: gcc
      addons:
        apt:
          packages: ["pkg-config", "g++-8"]
          sources: *apt_sources

    - env: COMPILER=clang++-7
      os: linux
      compiler: clang
      addons:
        apt:
          packages: ["pkg-config", "clang-7"]
          sources: *apt_sources

    - env: COMPILER=g++-8
      os: osx
      compiler: gcc
      osx_image: xcode10.1

    - env: COMPILER=clang++
      os: osx
      compiler: clang
      osx_image: xcode10.1

install:
  - export CXX="${COMPILER}"
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      if [[ "${COMPILER}" == "g++-8" ]]; then
        brew link --overwrite gcc
      else
        brew install lcov
      fi
    fi

before_script:
  - mkdir -p build

script:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]] && [[ "${COMPILER}" == "clang++" ]]; then
      cd build && cmake -DCOVERAGE_ENABLED=ON .. && cmake --build . && cd test && ctest
    else
      cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && cmake --build . && cd test && ctest
    fi

after_success:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]] && [[ "${COMPILER}" == "clang++" ]]; then
      lcov --capture --directory . --output-file coverage.info
      lcov --remove coverage.info '/usr/*' --output-file coverage.info
      lcov --list coverage.info
      bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
    fi

notifications:
  email: false
  slack:
    rooms:
      secure: Ezco+WkDybTPe+8iNKFyCAAuimsotzPeqy5Yv8+BOYVa9dC/glLjfofDAvjW5cfJ/FxpmDxAXWcG2Ruk7n1jDq/Jnn5gnjNQ44KrxUcjMq2CPNVtdJIn6TJyz0ZMYN3MpUCkDnsuIPBwb4lDlMrKpu1C8bIAoEFZite/RgYENLq6C4bu72e6RND2sHvCjYPj13+fTAjY9/voVDZK1Hkss8RM5V7QlG8z/c+KuCTk0qWsAbM/Z9Wrak4Ir8RHQ8XwPIz6mIlQaIdwy4UspQ8tA+wu2frxnkZatN4cfuhEUHtYB5K2wrtcCac6pC/SjJIDdAbA5nMb+drBdCqxXiFf1bhdBSu+F55Q/THlJltdxae8kqKszy33OBJPr+kAfNxIRYg8zrzhSQucLYsg797sQ4fnOGR+nNOqRdVUQ232PIaXBzLObczi64qC0MOJBgJcYT4nFyHeZHJhb0CorGt7/ay2VK5tJJ0XNE55xCSxiJuA8lVUtO3VQwijoT8AoO95citQ0DRShZXRzhVgmmmIk/SKN6y23d4N1vi0AXCxt010ArWusARWqu7j8bqsj7xUdzjEG9HsVluqrSYVH+Ca2F63sFW7mWZntLz7oKmeHLBj/bYKyBZmw/4hP/H8lzBdfeMx2lZDqvZN9UrENzzifjPPopPD94idc0pdYllt4KM=
